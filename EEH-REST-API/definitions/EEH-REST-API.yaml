paths:
  /Users:
    post:
      tags:
        - Users
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Users.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
    put:
      tags:
        - Users
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Users.upsert__put_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
    patch:
      tags:
        - Users
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Users.upsert__patch_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
    get:
      tags:
        - Users
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Users.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Users'
      deprecated: false
  /Users/replaceOrCreate:
    post:
      tags:
        - Users
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Users.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
  /Users/upsertWithWhere:
    post:
      tags:
        - Users
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Users.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - Users
      summary: Check whether a model instance exists in the data source.
      operationId: 'Users.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - Users
      summary: Check whether a model instance exists in the data source.
      operationId: 'Users.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Users
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Users.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
    delete:
      tags:
        - Users
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Users.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Users
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Users.prototype.updateAttributes__put_Users_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Users'
        - name: id
          in: path
          description: Users id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
    patch:
      tags:
        - Users
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Users.prototype.updateAttributes__patch_Users_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Users'
        - name: id
          in: path
          description: Users id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
  '/Users/{id}/replace':
    post:
      tags:
        - Users
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Users.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - Users
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Users.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
  /Users/update:
    post:
      tags:
        - Users
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Users.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Users/count:
    get:
      tags:
        - Users
      summary: Count instances of the model matched by where from the data source.
      operationId: Users.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /mqmds:
    post:
      tags:
        - mqmd
      summary: Create a new instance of the model and persist it into the data source.
      operationId: mqmd.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mqmd'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
    put:
      tags:
        - mqmd
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: mqmd.upsert__put_mqmds
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mqmd'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
    patch:
      tags:
        - mqmd
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: mqmd.upsert__patch_mqmds
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mqmd'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
    get:
      tags:
        - mqmd
      summary: Find all instances of the model matched by filter from the data source.
      operationId: mqmd.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/mqmd'
      deprecated: false
  /mqmds/replaceOrCreate:
    post:
      tags:
        - mqmd
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: mqmd.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mqmd'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
  /mqmds/upsertWithWhere:
    post:
      tags:
        - mqmd
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: mqmd.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mqmd'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
  '/mqmds/{id}/exists':
    get:
      tags:
        - mqmd
      summary: Check whether a model instance exists in the data source.
      operationId: 'mqmd.exists__get_mqmds_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/mqmds/{id}':
    head:
      tags:
        - mqmd
      summary: Check whether a model instance exists in the data source.
      operationId: 'mqmd.exists__head_mqmds_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - mqmd
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: mqmd.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
    delete:
      tags:
        - mqmd
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: mqmd.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - mqmd
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'mqmd.prototype.updateAttributes__put_mqmds_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mqmd'
        - name: id
          in: path
          description: mqmd id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
    patch:
      tags:
        - mqmd
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'mqmd.prototype.updateAttributes__patch_mqmds_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mqmd'
        - name: id
          in: path
          description: mqmd id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
  '/mqmds/{id}/replace':
    post:
      tags:
        - mqmd
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: mqmd.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mqmd'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
  /mqmds/findOne:
    get:
      tags:
        - mqmd
      summary: Find first instance of the model matched by filter from the data source.
      operationId: mqmd.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
  /mqmds/update:
    post:
      tags:
        - mqmd
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: mqmd.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mqmd'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /mqmds/count:
    get:
      tags:
        - mqmd
      summary: Count instances of the model matched by where from the data source.
      operationId: mqmd.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  Users:
    properties:
      challenges:
        type: object
      created:
        type: string
      credentials:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: string
      lastUpdated:
        type: string
      realm:
        type: string
      status:
        type: string
      username:
        type: string
    required:
      - email
    additionalProperties: false
  x-any:
    properties: {}
  mqmd:
    properties:
      id:
        type: string
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: eeh-rest-api
  version: 1.0.0
  title: EEH-REST-API
  contact:
    name: William Kersting
    email: wtkersti@ncsu.edu
    url: 'https://github.com/wtkersting'
  termsOfService: 'https://www.ibm.com'
  license:
    url: 'https://www.ibm.com'
    name: IBM
  description: EEH-REST-API
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: >-
          https://apiconnect-7892f3b5-06d1-4f36-a924-f4f90e2ffead.rgupta1usibmcom-redbook.apic.mybluemix.net
        invoke-tls-profile: 'client:Loopback-client'
  assembly:
    execute:
      - invoke:
          target-url: $(TARGET_HOST)$(request.path)
          tls-profile: $(invoke-tls-profile)
  properties:
    TARGET_HOST:
      value: >-
        https://apiconnect-7892f3b5-06d1-4f36-a924-f4f90e2ffead.rgupta1usibmcom-redbook.apic.mybluemix.net
      description: TARGET_HOST
      encoded: false
    runtime-url:
      value: ''
      description: ''
      encoded: false
    invoke-tls-profile:
      value: ''
      description: ''
      encoded: false
  gateway: datapower-gateway
externalDocs:
  description: EEH REST API
  url: >-
    https://www.ibm.com/developerworks/community/wikis/form/anonymous/api/wiki/0571da3f-2daa-4152-b791-11fb38aedd2e/page/cf0f76ad-626a-4a1b-8038-643910fce366/attachment/b3fdea8a-d556-402b-a4da-8ed68f6b0581/media/IBM%20Services%20Asset%20-%20EEH%20-%20REST%20API%20Security.pdf
